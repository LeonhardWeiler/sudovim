const lastDifficulty=localStorage.getItem("sudokuDifficulty")||"medium";let showLines=localStorage.getItem("showLines")||"true";window.addEventListener("load",()=>updateSudokuGrid(lastDifficulty)),document.querySelector(".toggle-lines").addEventListener("click",()=>toggleLines()),document.querySelector("#easy").addEventListener("click",()=>updateSudokuGrid("easy")),document.querySelector("#medium").addEventListener("click",()=>updateSudokuGrid("medium")),document.querySelector("#hard").addEventListener("click",()=>updateSudokuGrid("hard")),document.querySelector("#very-hard").addEventListener("click",()=>updateSudokuGrid("very-hard")),document.querySelector("#clear").addEventListener("click",()=>clearSudokuGrid(showLines)),document.querySelector("#solve").addEventListener("click",solveSudokuGrid),document.addEventListener("keydown",event=>cursorHighlight(event));let originalSudokuGrid,currentRow,currentCol;function updateSudokuGrid(difficulty){createSudokuGridHTML(difficulty),resetSudoku(showLines),localStorage.setItem("sudokuDifficulty",difficulty)}function possible(y,x,n,grid){for(let i=0;i<9;i++)if(grid[y][i]===n||grid[i][x]===n)return!1;var subgridStartX=3*Math.floor(x/3),subgridStartY=3*Math.floor(y/3);for(let i=0;i<3;i++)for(let j=0;j<3;j++)if(grid[subgridStartY+i][subgridStartX+j]===n)return!1;return!0}function solveSudoku(grid){for(let y=0;y<9;y++)for(let x=0;x<9;x++)if(0===grid[y][x]){for(let n=1;n<=9;n++)if(possible(y,x,n,grid)){if(grid[y][x]=n,solveSudoku(grid))return!0;grid[y][x]=0}return!1}return!0}function shuffle(array){for(let i=array.length-1;0<i;i--){var j=Math.floor(Math.random()*(i+1));[array[i],array[j]]=[array[j],array[i]]}return array}function createSudokuGrid(difficulty){var grid=Array.from({length:9},()=>Array(9).fill(0)),numbers=shuffle([1,2,3,4,5,6,7,8,9]);grid[0]=numbers,solveSudoku(grid),originalSudokuGrid=JSON.parse(JSON.stringify(grid));return removeCells(grid,{easy:30,medium:40,hard:50,"very-hard":60}[difficulty]),grid}function removeCells(grid,cellsToRemove){let cellsRemoved=0;for(;cellsRemoved<cellsToRemove;){var temp,row=Math.floor(9*Math.random()),col=Math.floor(9*Math.random());0!==grid[row][col]&&(temp=grid[row][col],grid[row][col]=0,solveSudoku(JSON.parse(JSON.stringify(grid)))?cellsRemoved++:grid[row][col]=temp)}}function createSudokuGridHTML(difficulty){const grid=createSudokuGrid(difficulty);document.querySelectorAll(".cell").forEach((cell,index)=>{var row=Math.floor(index/9),index=index%9,row=grid[row][index];0===row?(cell.textContent="",cell.classList.add("editable")):(cell.textContent=row,cell.classList.remove("editable"))})}function resetSudoku(showLines){resetCursor(),clearColors(),highlightSimilar(),"true"===showLines&&highlightLines(),toggleButtonCenter(showLines)}function resetCursor(){currentRow=4,currentCol=4;var highlightedCell=document.querySelector(".highlight");highlightedCell&&highlightedCell.classList.remove("highlight"),document.querySelectorAll(".cell")[40].classList.add("highlight")}function clearColors(){document.querySelectorAll(".solved").forEach(cell=>cell.classList.remove("solved")),document.querySelectorAll(".edited").forEach(cell=>cell.classList.remove("edited")),document.querySelectorAll(".wrong").forEach(cell=>cell.classList.remove("wrong")),document.querySelectorAll(".original").forEach(cell=>cell.classList.remove("original")),document.querySelectorAll(".empty").forEach(cell=>cell.classList.remove("empty"))}function highlightSimilar(){let highlightedCellValue=document.querySelector(".highlight");highlightedCellValue=highlightedCellValue&&highlightedCellValue.textContent,document.querySelectorAll(".cell").forEach(cell=>{cell.classList.remove("similar"),cell.textContent===highlightedCellValue&&cell!==document.querySelector(".highlight")&&""!==cell.textContent&&cell.classList.add("similar")})}function highlightLines(){const highlightedCell=document.querySelector(".highlight");var sudokuCells=Array.from(document.querySelectorAll(".cell"));const rowIndex=Math.floor(sudokuCells.indexOf(highlightedCell)/9),colIndex=sudokuCells.indexOf(highlightedCell)%9;sudokuCells.forEach((cell,index)=>{var cellRow=Math.floor(index/9),index=index%9;cell.classList.remove("highlight-line"),(index==colIndex&&cell!==highlightedCell||cellRow===rowIndex&&cell!==highlightedCell)&&cell.classList.add("highlight-line")})}function clearSudokuGrid(showLines){document.querySelectorAll(".cell").forEach(cell=>{cell.classList.contains("editable")&&(cell.textContent="")}),resetSudoku(showLines)}function solveSudokuGrid(){const sudokuCells=document.querySelectorAll(".cell");document.querySelectorAll(".similar").forEach(cell=>{cell.classList.remove("similar")}),document.querySelectorAll(".highlight-line").forEach(cell=>{cell.classList.remove("highlight-line")}),document.querySelector(".highlight").classList.remove("highlight"),sudokuCells.forEach(cell=>{cell.classList.contains("editable")||cell.classList.add("original")}),originalSudokuGrid.forEach((row,rowIndex)=>{row.forEach((cell,colIndex)=>{var colIndex=9*rowIndex+colIndex,cellValue=sudokuCells[colIndex].textContent;""===cellValue?(sudokuCells[colIndex].textContent=cell,sudokuCells[colIndex].classList.add("empty")):cellValue!==cell.toString()?(sudokuCells[colIndex].textContent=cell,sudokuCells[colIndex].classList.add("wrong")):sudokuCells[colIndex].classList.add("solved")})})}function cursorHighlight(event){var highlightedCell=document.querySelector(".highlight"),event=event.key,event=("h"===event&&0<currentCol?currentCol--:"j"===event&&currentRow<8?currentRow++:"k"===event&&0<currentRow?currentRow--:"l"===event&&currentCol<8?currentCol++:!isNaN(event)&&1<=event&&event<=9&&highlightedCell.classList.contains("editable")?(highlightedCell.textContent=event,highlightedCell.classList.add("edited")):"x"===event&&highlightedCell.classList.contains("editable")&&(highlightedCell.textContent="",highlightedCell.classList.remove("edited")),9*currentRow+currentCol);highlightedCell.classList.remove("highlight"),document.querySelectorAll(".cell")[event].classList.add("highlight"),highlightSimilar(),"true"===showLines&&highlightLines()}function toggleLines(){var button=document.querySelector(".box"),lines=document.querySelectorAll(".highlight-line");0<button.childNodes.length?(toggleButtonCenter(showLines="false"),lines.forEach(line=>line.classList.remove("highlight-line"))):toggleButtonCenter(showLines="true"),localStorage.setItem("showLines",showLines)}function toggleButtonCenter(showLines){var center,button=document.querySelector(".box");"true"===showLines&&0===button.childNodes.length?((center=document.createElement("div")).classList.add("box-center"),button.appendChild(center),highlightLines()):"false"===showLines&&0<button.childNodes.length&&button.removeChild(button.firstChild)}